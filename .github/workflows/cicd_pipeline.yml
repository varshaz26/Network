name: CI/CD Pipeline for Terraform and Ansible

on:
  push:
    branches:
      - main  # Trigger pipeline when code is pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set AWS Credentials
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'

    # Step 3: Terraform Init - Initialize Terraform configuration
    - name: Terraform Init
      run: terraform init

    # Step 4: Terraform Apply - Apply the Terraform configuration to provision the infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Get EC2 Public IP and create hosts.ini file for Ansible
      run: |
        EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
        echo "[web_servers]" > hosts.ini
        echo "$EC2_PUBLIC_IP ansible_ssh_user=ec2-user ansible_ssh_private_key_file=${{ secrets.SSH_PRIVATE_KEY }}" >> hosts.ini
        cat hosts.ini
  
    
    # Step 6: Install Ansible on the GitHub Actions runner
    - name: Install Ansible
      run: |
        sudo apt update
        sudo apt install -y ansible sshpass

    # Step 8: Add EC2 instance's SSH key to known_hosts to avoid "Host key verification failed" error
    - name: Add EC2 Host Key to known_hosts
      run: |
        EC2_PUBLIC_IP=$(terraform output -raw instance_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
        ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts

        
    # Step 8: Run Ansible Playbook to install Docker on the EC2 instance
    - name: Run Ansible Playbook
      run: |
        ansible-playbook -i hosts.ini docker.yml

    # Step 9: (Optional) Destroy Terraform-managed resources after the pipeline runs
    - name: Terraform Destroy (Optional)
      run: terraform destroy -auto-approve
      if: github.event_name == 'push' && github.event.head_commit.message == 'destroy'
